const HDLD_FUSIONPISTOL="zfp";

class HDFusionPistol:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Heckler & Mok VP-91 Fusion Pistol"
		//$Sprite "P20PA0"

		-hdweapon.fitsinbackpack
		weapon.selectionorder 60;
		weapon.slotnumber 2;
		weapon.kickback 30;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got the VP-91 Fusion Pistol!";
		obituary "%o got disposed by %k's really strong piece of metal.";
		hdweapon.barrelsize 5,1,2;
		tag "Heckler & Mok VP-91 Fusion Pistol";
		hdweapon.refid HDLD_FUSIONPISTOL;
	}
	override string pickupmessage(){
		if(weaponstatus[1]&VP91S_CHAMBER)return string.format("%s It is used.",super.pickupmessage());
		else return string.format("%s It has a charge.",super.pickupmessage());
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(VP91S_HEAT,32);
	}
	override void postbeginplay(){
		super.postbeginplay();
		}
	override double gunmass(){
		double amt=weaponstatus[VP91S_CHAMBER];
		return 4+amt*amt;
	}
	override double weaponbulk(){
		return 20;
	}
	
		override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=Screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*2;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(1.6,2)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"backsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:(2,1)
		);
	}
	
	action void A_FireFusionPistol(){
		let ggg=HDFusionPistol_Ball(spawn("HDFusionPistol_Ball",pos+(
				0,0,HDWeapon.GetShootOffset(
					self,invoker.barrellength,
					invoker.barrellength-HDCONST_SHOULDERTORADIUS
				)-2
			),
			ALLOW_REPLACE)
		);
		ggg.angle=angle;ggg.pitch=pitch-0;ggg.target=self;ggg.master=self;
	}
	
	override string,double getpickupsprite(){return "P20PA0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawnum(hpl.countinv("HDPS20"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		if(hdw.weaponstatus[PS20S_CHAMBER]>1)sb.drawwepdot(-16,-10,(5,3));
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_UNLOAD.."   Throw\n"
		;
	}
	
	states{
	select0:
		ZFPG A 0 A_JumpIf(invoker.weaponstatus[VP91S_CHAMBER]<2,"YEET");
		ZFPG A 0 A_JumpIfInventory("HDIncapWeapon",1,"Fire");
		ZFPG A 0;
		goto select0small;
	deselect0:
		ZFPG A 0;
		goto deselect0small;
	ready:
		ZFPG A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	fire:
		ZFPG A 1 offset(0,34){
			if(invoker.weaponstatus[VP91S_CHAMBER]<2){
				setweaponstate("unload");
				return;
			}
			A_GunFlash();
			A_FireFusionPistol();
			A_StartSound("weapons/ps20fire",CHAN_WEAPON);
			A_StartSound("weapons/ps20fire2",CHAN_6);
			//invoker.weaponstatus[VP91S_CHAMBER]=1;
			invoker.weaponstatus[VP91S_HEAT]+=5;
		}
		ZFPG B 1;
		//P20G A 10;
		goto nope;
		//goto unload;
	flash:
		TNT1 A 1 bright{
			HDFlashAlpha(0,true);
			A_Light1();
		}
		TNT1 A 2{
			A_ZoomRecoil(0.5);
			A_Light0();
		}
		stop;
	spawn:
		P20P AB -1 nodelay{
			if(invoker.weaponstatus[VP91S_CHAMBER]<2)frame=1;
		}
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[VP91S_CHAMBER]=2;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[VP91S_HEAT]=0;
		}
	}
}
enum vp91status{
	VP91F_JUSTUNLOAD=1,

	VP91S_STATUS=0,
	VP91S_CHAMBER=1,
	VP91S_HEAT=2,
};
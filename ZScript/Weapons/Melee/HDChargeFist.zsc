
class HDCFistPuff:HDBulletPuff{
	default{
		stamina 5;scale 0.6;
		hdbulletpuff.scarechance 5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		if(!random(0,scarechance)){
			actor fff=spawn("idledummy",pos,ALLOW_REPLACE);
			fff.stamina=random(60,120);
			hdmobai.frighten(fff,256);
		}
		A_StartSound("misc/bullethit",0,volume:0.5*stamina*stamina);
		A_StartSound("weapons/axewall",CHAN_7,volume:1.02*stamina*stamina);
		A_ChangeVelocity(-0.4,0,frandom(0.1,0.4),CVF_RELATIVE);
		trymove(pos.xy+vel.xy,false);
		int stm=stamina;
		fadeafter=frandom(0,1);
		scale*=frandom(0.9,1.1);
		for(int i=0;i<stamina;i++){
			A_SpawnParticle("gray",
				SPF_RELATIVE,70,frandom(4,20)*getdefaultbytype((class<actor>)(missilename)).scale.x,0,
				frandom(-3,3),frandom(-3,3),frandom(0,4),
				frandom(-0.4,0.4)*stm,frandom(-0.4,0.4)*stm,frandom(0.4,1.2)*stm,
				frandom(-0.1,0.1),frandom(-0.1,0.1),-1.
			);

//			actor ch=spawn(missilename,self.pos,ALLOW_REPLACE);
//			ch.vel=self.vel+(random(-stm,stm),random(-stm,stm),random(-2,12));
		}
	}
	states{
	spawn:
		TNT1 A 1 nodelay{
			if(tracer){
				if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				hdwound.inflict(tracer,random(3,7));
				}
				else 
				{
				hdwound.inflict(tracer,random(3,7));
				}
			}
		}stop;
	crash:
		TNT1 A 1;
		stop;
	}
}
	
const HDLD_CFIST="cfs";

class HDChargeFist:HD_PB_UnarmedWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Fire Axe"
		//$Sprite "FAXPA0"
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT
		+hdweapon.fitsinbackpack
		+hdweapon.reverseinertia
		+forcepain
		inventory.pickupmessage "You got the Charge Fist!";
		obituary "%o got reduced to a pile of meat by %k.";
		attacksound "weapons/cfistwall";
		weapon.selectionorder 200;
		weapon.slotpriority 0.75;
		weapon.kickback 15;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		scale 0.75;
		tag "yeah";
		hdweapon.refid HDLD_CFIST;
		//hdweapon.barrelsize 21,3,1;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDChargeFist(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
		
		sb.drawnum(hdw.weaponstatus[CFISS_CHARGE],
		-16,-18,sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	
	//for throwing a weapon
	override inventory CreateTossable(int amount){
		let onr=hdplayerpawn(owner);
		bool throw=(
			onr&&(
				onr.zerk
				||(
					onr.player
					&&onr.player.cmd.buttons&BT_ZOOM
				)
			)
		);
		bool isreadyweapon=onr&&onr.player&&onr.player.readyweapon==self;
		if(!isreadyweapon)throw=false;
		let thrown=super.createtossable(amount);
		if(!thrown)return null;
		let newwep=GetSpareWeapon(onr,doselect:isreadyweapon);
		hdweapon(thrown).bjustchucked=true;
		thrown.target=onr;
		if(throw){
			thrown.bmissile=true;
			thrown.bBOUNCEONWALLS=true;
			thrown.bBOUNCEONFLOORS=true;
			thrown.bALLOWBOUNCEONACTORS=true;
			thrown.bBOUNCEAUTOOFF=true;
		}else{
			thrown.bmissile=false;
			thrown.bBOUNCEONWALLS=false;
			thrown.bBOUNCEONFLOORS=false;
			thrown.bALLOWBOUNCEONACTORS=false;
			thrown.bBOUNCEAUTOOFF=false;
		}
		return thrown;
	}
	//an override is needed because DropInventory will undo anything done in CreateTossable
	double throwvel;
	override void Tick(){
		super.Tick();
		if(bjustchucked&&target){
			double cp=cos(target.pitch);
			if(bmissile){
				vel=target.vel+
					(cp*cos(target.angle),cp*sin(target.angle),-sin(target.pitch))
					*min(20,1000/weaponbulk())
					*((hdplayerpawn(target)&&hdplayerpawn(target).zerk>0)?frandom(1,4):1
				);
			}else vel=target.vel+2*(cp*cos(target.angle),cp*sin(target.angle),-sin(target.pitch))*2;
			setz(target.pos.z+target.height-16);
			throwvel=vel dot vel;
			bjustchucked=false;
		}
		if(owner){
			if(amount<1){
				destroy();
				return;
			}else{
				//update count
				actualamount=1;
				if(owner&&owner.findinventory("SpareWeapons")){
					let spw=spareweapons(owner.findinventory("SpareWeapons"));
					string gcn=getclassname();
					for(int i=0;i<spw.weapontype.size();i++){
						if(spw.weapontype[i]==gcn)actualamount++;
					}
				}
			}
			let onr=hdplayerpawn(owner);
			if(
				!bwimpy_weapon
				&&!hdfist(self)
				&&onr
				&&onr.player
				&&onr.player.readyweapon==self
				&&!onr.barehanded
				&&onr.zerk
				&&(
					onr.player.cmd.buttons&BT_ATTACK
					||onr.player.cmd.buttons&BT_ALTATTACK
					||onr.player.cmd.buttons&BT_ZOOM
					||bweaponbusy
					||onr.vel.xy==(0,0)
				)
				&&!random(0,511)
			){
				onr.A_StartSound(random(0,5)?"*xdeath":"*taunt",CHAN_VOICE);
				onr.A_AlertMonsters();
				onr.dropinventory(self);
			}
		}
	}
	
	override string,double getpickupsprite(){return "CFISZ0",1.;}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Punch\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_UNLOAD.."   Throw\n"
		//..WEPHELP_ZOOM.."+"..WEPHELP_DROP.."   Drop misc. items\n"
		;
	}
	
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDPunch2(int dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,70,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;
		
			/*doordestroyer.destroydoor(
				self,dmg*1,dmg*0.07,48,height-75,
			angle,pitch);*/

		//actual puff effect if the shot connects
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"WallChunker":"WallChunker",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
			
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"HDSmokeChunk":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
		
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"HDCFistPuff":"HDCFistPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);
			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(0.35,0.5);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "HDBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.3,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Hit %s for %i damage!",pch,dmg));
		}
		
		
		//hit sound
		if(punchee.bnoblood)
		{
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axewall",CHAN_BODY,volume:1.25);
		}
		else 
		{
		punchee.A_StartSound("weapons/axeflesh",CHAN_BODY,volume:0.5);
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axeflesh",CHAN_7,volume:1);
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axesplat",CHAN_6,volume:1);
		}
		
		if(punchee.health>0)punchee.damagemobj(self,self,dmg,"SmallArms3");
		else HDF.Give(punchee,"SawGib",dmg*0.2);
		
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"HDCFistPuff":"HDCFistPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	action void A_Lunge(){
		hdplayerpawn hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30){setweaponstate("hold");return;}
			else hdp.fatigue+=3;
		}
		A_Recoil(-3);
	}
	static void kick(actor kicker,actor kickee,actor kicking){
		kickee.A_StartSound("weapons/smack",CHAN_BODY);
		bool kzk=kicker.countinv("HDZerk");
		kickee.damagemobj(kicking,kicker,kzk?random(20,40):random(10,20),"bashing");
		if(kickee&&!kickee.bnopain&&kickee.health>0&&random(0,4))kickee.setstatelabel("pain");
		vector3 kickdir=(kickee.pos-kicker.pos).unit();
		if(kickee)kickee.vel=kickdir*(kzk?10:2);
		kicker.vel-=kickdir;
	}
	
	override double weaponbulk(){
		return 55;
	}
	override double gunmass(){
		return 7;
	}
	
	states{
		select0:
		FAX0 A 0;
		goto select0big;
	deselect0:
		FAX0 A 0;
		goto deselect0big;
	
	ready:
		FAX0 A 1{
				{//length manipulation
				invoker.barrellength = 12.5;
				invoker.barrelwidth = 5.25;
				invoker.barreldepth = 1.5;
				}
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	reload:
		TNT1 A 0 A_Overlay(-999999,"kick",false);
	fire:
	althold:
		TNT1 A 0;
	startfire:
		#### A 0 A_JumpIfInventory("HDZerk",1,"zerkswingstart");
		FAX0 A 0 A_StartSound("weapons/pocket",CHAN_6);
		FAX0 A 0;
		FAX0 B 3;
		FAX0 C 3
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		FAX0 C 0 A_WeaponBusy;
		FAX0 C 2 offset(25,64);
		FAX0 C 2 offset(40,86);
		TNT1 A 4 offset(0,32);
		goto holdswing;
	zerkswingstart:
		FAX0 A 0 A_StartSound("weapons/pocket",CHAN_6);
		FAX0 A 0;
		FAX0 B 1;
		FAX0 C 1
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		FAX0 C 0 A_WeaponBusy;
		FAX0 C 1 offset(25,64);
		FAX0 C 1 offset(40,86);
		TNT1 A 2 offset(0,32);
		goto holdswing;
	holdswing:
		TNT1 A 1
		{
		A_WeaponBusy();
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		}
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		TNT1 A 0 A_ReFire("holdswing");
	goto swing;
	swingreturn:
		TNT1 A 7;
		TNT1 A 5 A_StartSound("weapons/pocket",CHAN_6);
	goto holdswing;
	swing:
		#### A 0 A_JumpIfInventory("HDZerk",1,"zerkswing");
		FAX0 A 0 A_StartSound("weapons/axeswing",CHAN_7);
		FAX0 DE 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 6;
		invoker.barreldepth = 2;
		}
		#### D 0 HDPunch2(65);
		#### F 1
		{
		invoker.barrellength = 27;
		invoker.barrelwidth = 8;
		invoker.barreldepth = 2;
		}
		#### GH 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 6;
		invoker.barreldepth = 2;
		}
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 6
		{
		invoker.barrellength = 11.5;
		invoker.barrelwidth = 1.25;
		invoker.barreldepth = 0.5;
		}
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		FAX0 A 0 A_WeaponBusy;
		goto recoverswing;
	recoverswing:
		FAX0 A 2 offset(10,84);
		FAX0 A 2 offset(9,72);
		FAX0 A 2 offset(8,60);
		FAX0 A 1 offset(7,52);
		FAX0 A 1 offset(5,42);
		FAX0 A 1 offset(3,38);
		FAX0 A 1 offset(3,35);
		goto readyend;
		
	zerkswing:
		FAX0 A 0 A_StartSound("weapons/axeswing",CHAN_7);
		FAX0 DE 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 6;
		invoker.barreldepth = 2;
		}
		#### D 0 HDPunch2(invoker.flicked?350:300);
		#### F 1
		{
		invoker.barrellength = 27;
		invoker.barrelwidth = 8;
		invoker.barreldepth = 2;
		}
		#### GH 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 6;
		invoker.barreldepth = 2;
		}
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 3
		{
		invoker.barrellength = 11.5;
		invoker.barrelwidth = 1.25;
		invoker.barreldepth = 0.5;
		}
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		FAX0 A 0 A_WeaponBusy;
		goto recoverswing;
	altfire:
		FAX0 A 0 A_StartSound("weapons/pocket",CHAN_6);
		FAX0 B 3;
		FAX0 C 0 
		{
		A_WeaponBusy();
		A_Overlay(-999999,"lunge",false);
		}
		FAX0 C 3
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		FAX0 C 2 offset(25,64);
		FAX0 C 2 offset(40,86);
		TNT1 A 6 offset(0,32);
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		#### A 0 A_JumpIf(pressingaltfire(),"kickattack");
		goto recoverswing;
	lunge:
		TNT1 A 2 A_CheckFloor("lunge2");
		stop;
	lunge2:
		TNT1 A 0 A_Lunge();
		TNT1 AA 1{
			if(countinv("HDZerk"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
		stop;
	lungealt:
		TNT1 A 3
		{
		A_WeaponBusy();
		A_Overlay(-999999,"lunge",false);
		}
		TNT1 A 13
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		#### A 0 A_JumpIf(pressingaltfire(),"kickattack");
		goto recoverswing;
	KickAttack:
		TNT1 A 0 A_Overlay(-999999,"kick",false);
		goto recoverswing;
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("HDZerk"))A_SetTics(8);
		}
		stop;
	
	unload:
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
	spawn:
		FAXP A -1;
		stop;
	}
}
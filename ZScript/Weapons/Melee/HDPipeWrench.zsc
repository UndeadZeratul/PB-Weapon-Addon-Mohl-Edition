// ------------------------------------------------------------
// Fist
// ------------------------------------------------------------

class HDPipeWrenchPuff:HDBulletPuff{
	default{
		stamina 5;scale 0.6;
		hdbulletpuff.scarechance 5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		if(!random(0,scarechance)){
			actor fff=spawn("idledummy",pos,ALLOW_REPLACE);
			fff.stamina=random(60,120);
			hdmobai.frighten(fff,256);
		}
		A_StartSound("misc/bullethit",0,volume:0.5*stamina*stamina);
		A_StartSound("weapons/axewall",CHAN_7,volume:1.02*stamina*stamina);
		A_ChangeVelocity(-0.4,0,frandom(0.1,0.4),CVF_RELATIVE);
		trymove(pos.xy+vel.xy,false);
		int stm=stamina;
		fadeafter=frandom(0,1);
		scale*=frandom(0.9,1.1);
		for(int i=0;i<stamina;i++){
			A_SpawnParticle("gray",
				SPF_RELATIVE,70,frandom(4,20)*getdefaultbytype((class<actor>)(missilename)).scale.x,0,
				frandom(-3,3),frandom(-3,3),frandom(0,4),
				frandom(-0.4,0.4)*stm,frandom(-0.4,0.4)*stm,frandom(0.4,1.2)*stm,
				frandom(-0.1,0.1),frandom(-0.1,0.1),-1.
			);
//			actor ch=spawn(missilename,self.pos,ALLOW_REPLACE);
//			ch.vel=self.vel+(random(-stm,stm),random(-stm,stm),random(-2,12));
		}
	}
}
	
const HDLD_PWRENCH="PWR";

class HDPipeWrench:HDWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	default{
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+hdweapon.fitsinbackpack
		+forcepain
		obituary "%k put a wrench %o's plans.";
		attacksound "weapons/axewall";
		weapon.selectionorder 120;
		weapon.kickback 15;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		hdweapon.nicename "Fire Axe";
		hdweapon.refid  HDLD_PWRENCH;
		//hdweapon.barrelsize 21,3,1;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDPipeWrench(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Swing\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_RELOAD.."   Kick then Swing\n"
		..WEPHELP_UNLOAD.."   Throw\n"
		//..WEPHELP_ZOOM.."+"..WEPHELP_DROP.."   Drop misc. items\n"
		;
	}
	
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDPunch(int dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,70,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(angle,60,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"HDSmokeChunk":"BulletPuffBig",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
		
		LineAttack(angle,60,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"HDPipeWrenchPuff":"HDPipeWrenchPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(0.6,1.6);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "HDBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Punched %s for %i damage!",pch,dmg));
		}
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axeflesh",CHAN_7,volume:1.5);
		if(punchee.health>0)punchee.damagemobj(self,self,dmg,"SmallArms2");
		else HDF.Give(punchee,"SawGib",dmg*0.2);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	action void A_Lunge(){
		hdplayerpawn hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30){setweaponstate("hold");return;}
			else hdp.fatigue+=3;
		}
		A_Recoil(-3);
	}
	static void kick(actor kicker,actor kickee,actor kicking){
		kickee.A_StartSound("weapons/smack",CHAN_BODY);
		bool kzk=kicker.countinv("HDZerk");
		kickee.damagemobj(kicking,kicker,kzk?random(20,40):random(10,20),"bashing");
		if(kickee&&!kickee.bnopain&&kickee.health>0&&random(0,4))kickee.setstatelabel("pain");
		vector3 kickdir=(kickee.pos-kicker.pos).unit();
		if(kickee)kickee.vel=kickdir*(kzk?10:2);
		kicker.vel-=kickdir;
	}
	
	override double weaponbulk(){
		return 65;
	}
	override double gunmass(){
		return 12;
	}
	
	states{
		select0:
		PWR0 A 0;
		goto select0big;
	deselect0:
		PWR0 A 0;
		goto deselect0big;
	
	ready:
		PWR0 A 1{
				{//length manipulation
				invoker.barrellength = 10.5;
				invoker.barrelwidth = 1.25;
				invoker.barreldepth = 1.5;
				}
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	reload:
		TNT1 A 0 A_Overlay(-999999,"kick",false);
	fire:
	althold:
		TNT1 A 0;
	startfire:
		#### A 0 A_JumpIfInventory("HDZerk",1,"zerkswingstart");
		PWR0 A 0 A_WeaponBusy();
		PWR0 A 1 offset(2,36) A_ClearRefire();
		PWR0 "#" 1 offset(3,38);
		PWR0 "#" 1 offset(5,52);
		PWR0 "#" 1 offset(8,68) A_StartSound("weapons/pocket",CHAN_WEAPON);
		PWR0 "#" 1 offset(9,72);
		PWR0 "#" 2 offset(8,80);
		PWR0 "#" 2 offset(7,92);
		TNT1 "#" 2;
		goto holdswing;
	zerkswingstart:
		PWR0 A 0 A_StartSound("weapons/pocket",CHAN_6);
		PWR0 A 0 A_WeaponBusy();
		PWR0 A 1 offset(2,36) A_ClearRefire();
		PWR0 "#" 1 offset(3,38);
		PWR0 "#" 1 offset(5,52);
		PWR0 "#" 1 offset(8,68) A_StartSound("weapons/pocket",CHAN_WEAPON);
		PWR0 "#" 1 offset(9,72);
		PWR0 "#" 1 offset(8,80);
		PWR0 "#" 1 offset(7,92);
		TNT1 "#" 1;
		goto holdswing;
	holdswing:
		TNT1 A 1
		{
		A_WeaponBusy();
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		}
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		TNT1 A 0 A_ReFire("holdswing");
	goto swing;
	swingreturn:
		TNT1 A 4;
		TNT1 A 2 A_StartSound("weapons/pocket",CHAN_6);
	goto holdswing;
	swing:
		#### A 0 A_JumpIfInventory("HDZerk",1,"zerkswing");
		PWR0 A 0 A_StartSound("weapons/piepwrenchswing",CHAN_7);
		PWR0 BC 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 2;
		invoker.barreldepth = 1;
		}
		#### D 0 HDPunch(46);
		#### DE 1
		{
		invoker.barrellength = 17;
		invoker.barrelwidth = 4;
		invoker.barreldepth = 1;
		}
		#### FGH 1
		{
		invoker.barrellength = 15;
		invoker.barrelwidth = 2;
		invoker.barreldepth = 1;
		}
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 4
		{
		invoker.barrellength = 10.5;
		invoker.barrelwidth = 1.25;
		invoker.barreldepth = 1.5;
		}
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		PWR0 A 0 A_WeaponBusy;
		goto recoverswing;
	recoverswing:
		PWR0 A 2 offset(10,84);
		PWR0 A 2 offset(9,72);
		PWR0 A 2 offset(8,60);
		PWR0 A 1 offset(7,52);
		PWR0 A 1 offset(5,42);
		PWR0 A 1 offset(3,38);
		PWR0 A 1 offset(3,35);
		goto ready;
		
	zerkswing:
		PWR0 A 0 A_StartSound("weapons/axeswing",CHAN_7);
		PWR0 BC 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 2;
		invoker.barreldepth = 1;
		}
		#### D 0 HDPunch(33);
		#### DE 1
		{
		invoker.barrellength = 27;
		invoker.barrelwidth = 4;
		invoker.barreldepth = 1;
		}
		#### FGH 1
		{
		invoker.barrellength = 25;
		invoker.barrelwidth = 2;
		invoker.barreldepth = 1;
		}
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 1
		{
		invoker.barrellength = 10.5;
		invoker.barrelwidth = 1.25;
		invoker.barreldepth = 1.5;
		}
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		PWR0 A 0 A_WeaponBusy;
		goto recoverswing;
		
	altfire:
		PWR0 A 0 A_StartSound("weapons/pocket",CHAN_6);
		PWR0 B 3;
		PWR0 C 0 
		{
		A_WeaponBusy();
		A_Overlay(-999999,"lunge",false);
		}
		PWR0 C 3
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		PWR0 C 2 offset(25,64);
		PWR0 C 2 offset(40,86);
		TNT1 A 6 offset(0,32);
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		#### A 0 A_JumpIf(pressingaltfire(),"kickattack");
		goto recoverswing;
	lunge:
		TNT1 A 2 A_CheckFloor("lunge2");
		stop;
	lunge2:
		TNT1 A 0 A_Lunge();
		TNT1 AA 1{
			if(countinv("HDZerk"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
		stop;
	lungealt:
		TNT1 A 3
		{
		A_WeaponBusy();
		A_Overlay(-999999,"lunge",false);
		}
		TNT1 A 13
		{
		invoker.barrellength = 5.5;
		invoker.barrelwidth = 0;
		invoker.barreldepth = 0;
		}
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		#### A 0 A_JumpIf(pressingaltfire(),"kickattack");
		goto recoverswing;
	KickAttack:
		TNT1 A 0 A_Overlay(-999999,"kick",false);
		goto recoverswing;
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("HDZerk"))A_SetTics(8);
		}
		stop;
	
	unload:
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
	spawn:
		FAXP A -1;
		stop;
	}
}
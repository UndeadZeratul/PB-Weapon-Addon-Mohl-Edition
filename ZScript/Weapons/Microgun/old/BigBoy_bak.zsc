const HDLD_SMARTGUN="smr";

class HDMicrogun:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "PS-451"
		//$Sprite "P20PA0"

		-hdweapon.reverseguninertia
		-hdweapon.fitsinbackpack
		weapon.selectionorder 60;
		weapon.slotnumber 8;
		weapon.kickback 30;
		weapon.bobrangex 1.86;
		weapon.bobrangey 1.1;
		scale 0.85;
		inventory.pickupmessage "You got the HS76 SmartGun!";
		obituary "%o was turned into swiss cheese by %k's bike parts.";
		hdweapon.barrelsize 40,4,2;
		tag "H&M HS76 SmartGun";
		hdweapon.refid HDLD_SMARTGUN;
	}
	override string pickupmessage(){
		if(weaponstatus[MCRGS_AMMO]<1)return string.format("%s It is empty.",super.pickupmessage());
		else return string.format("%s Fire it in short, controlled bursts!",super.pickupmessage());
		return super.pickupmessage();
	}
	
	/*	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int scaledyoffset=47;
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<20){
				sb.drawimage(
					whichdot,(0,0)+bob*1.6,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.04
				);
			}
	}*/
	
	action void HDSmartGun_CheckTarget(){
		flinetracedata sgtargetline;
		bool sgtarget=linetrace(
			angle,480,pitch,
			TRF_NOSKY,
			offsetz:height-0,
			data:sgtargetline
		);
		//Checking for target, based off of the fist's headshot code
		if(!sgtarget)return;
		
		//A_StartSound("weapons/xm556microgun/speen",CHAN_7);
		actor sgtargetfound=sgtargetline.hitactor;
		
		if(
		(sgtargetfound is "actor")
		&&sgtargetfound.bismonster
		//&&!sgtargetfound.bnoblood
		&&sgtargetfound.health>0
		)
		setweaponstate("TargetFound",5);
	}
	
	static double Fire(actor caller,int choke=1){
		double spread=6.;
		double speedfactor=1.;
		let mcrg=HDMicrogun(caller.findinventory("HDMicrogun"));
		if(mcrg)

		spread=9.5;

		let p=HDBulletActor.FireBullet(caller,"HDB_776",
			spread:spread,amount:1
		);
		distantnoise.make(p,"world/riflefar");
		//caller.A_StartSound("weapons/bigrifle",CHAN_WEAPON,CHANF_OVERLAP);
		return spread;
	}
	
	action void A_FireMicrogun2(){
		invoker.Fire(self);
		vector2 shotrecoil=(randompick(-1,1),-2.6);
		A_MuzzleClimb(0,0,-frandom(0.1,0.3),-frandom(0.4,0.8));
		
		if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
				A_GiveInventory("IsMoving",1);}
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(MCRGS_HEAT,6);
	}
	override void postbeginplay(){
		super.postbeginplay();
	}
	override double gunmass(){
		return 23;
	}
	override double weaponbulk(){
		return 195;
	}
	
	override string,double getpickupsprite(){return "SMP1"..((weaponstatus[MCRGS_AMMO]<0)?"A":"B").."0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_PB_7mmBeltBox")));
			if(nextmagloaded>=250){
				sb.drawimage("HW0BA0",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextmagloaded<1){
				sb.drawimage("HW0BB0",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"HW0BNORM","HW0BGREY",
				nextmagloaded,250,
				(-49,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD_PB_7mmBeltBox"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);

			if(weaponstatus[MCRGS_AMMO]>0){
				sb.DrawNum(hdw.weaponstatus[MCRGS_AMMO], -16, -22, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
				sb.drawwepnum(hdw.weaponstatus[MCRGS_AMMO],250);
			}
			if(weaponstatus[MCRGS_TARGETTER]!=1)
				sb.drawwepcounter(hdw.weaponstatus[MCRGS_TARGETTER],-22,-10,"RBRSA3A7","STBURAUT","STFULAUT");
		}
		// Draw indicator that the magazine is unloaded.
		if(hdw.weaponstatus[0]&MCRGS_AMMO && weaponstatus[MCRGS_AMMO]<0){
			sb.drawrect(-26,-17,10,1);
			sb.drawrect(-24,-20,8,1);
			sb.drawrect(-21,-23,5,1);
		}
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		//..WEPHELP_ALTFIRE.."  Toggle harness\n"
		..WEPHELP_FIREMODE.."  Manual/Assisted\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	states{
	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.2,0.2),
						frandom(0.1,clamp(1-pitch,0.1,0.3)));
				}else{
					A_MuzzleClimb(frandom(-0.06,0.06),
						frandom(0.1,clamp(1-pitch,0.06,0.12)));
				}
			}
		}loop;
		
	targetcheck:
		TNT1 A 0 {if(invoker.weaponstatus[MCRGS_TARGETTER]==1)HDSmartGun_CheckTarget();}
		TNT1 A 1 
		{
		invoker.weaponstatus[MCRGS_TARGETFOUND]-=1;
		}
		loop;
	targetfound:
		TNT1 A 1 {
		invoker.weaponstatus[MCRGS_TARGETFOUND]=2;
		A_StartSound("weapons/xm556microgun/speen",CHAN_7,volume:0.9,5);}
		TNT1 A 0 {if(invoker.weaponstatus[MCRGS_TARGETTER]==0)setweaponstate("targetcheck",5);}
		goto targetcheck;
	
	select0:
		SMR1 A 0 {
		A_Overlay(2,"droop");
		A_Overlay(5,"targetcheck");
		}
		goto select0bfg;
	deselect0:
		SMR1 A 0;
		---- A 0 A_JumpIf(
			invoker.weaponstatus[0]&MCRGF_STRAPPED
			&&!countinv("NulledWeapon")
			,"togglestrap"
		);
		goto deselect0bfg;
	ready:
		SMR1 A 1 {A_WeaponReady(WRF_ALL);A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);}
		goto readyend;
	fire:
	truefire:
		#### A 0 {
			if(invoker.weaponstatus[MCRGS_AMMO]<1)
			setweaponstate("nope");
			}
		#### A 1 {
			if(invoker.weaponstatus[MCRGS_TARGETTER]==0)
			setweaponstate("Hailstorm");
			}
		#### A 0 {
			if((invoker.weaponstatus[MCRGS_TARGETTER]==1)
			&&(invoker.weaponstatus[MCRGS_TARGETFOUND]>1))
			setweaponstate("Hailstorm");
			else if(invoker.weaponstatus[MCRGS_TARGETTER]==1)setweaponstate("HailStormChecker");
			}
		goto nope;
	HailStorm:
		SMR1 A 0 A_GunFlash();
		SMR1 B 1{
			double cosp=cos(pitch);
				A_SpawnItemEx("HD_Downwards776Casing_PB",
					cos(pitch)*12,0,height-9-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_SpawnItemEx("HDFlyingBeltLink",
					cos(pitch)*12,0,height-9-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_StartSound("weapons/xm556microgun/fire",CHAN_WEAPON,CHANF_OVERLAP,2);
			A_FireMicrogun2();
			A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);
			A_OverlayFlags(PSP_WEAPON,PSPF_INTERPOLATE,false);
			invoker.weaponstatus[MCRGS_AMMO]-=1;
		}
		SMR1 C 1 
		{A_OverlayPivot(PSP_WEAPON,0.5,0.5);
		A_OverlayRotate(PSP_WEAPON,frandom(-2,2));}
		#### A 0 {
			if(invoker.weaponstatus[MCRGS_TARGETTER]<1)
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
			}
		#### D 0
		{
		A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);
		
		if((invoker.weaponstatus[MCRGS_TARGETTER]==1)
		&&(invoker.weaponstatus[MCRGS_TARGETFOUND]>1))
			{
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
			}
		}
		goto funisover;
	funisover:
		#### A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
		SMR1 DEAAA 1;
		SMR1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
		goto readyend;
	HailStormChecker:
		#### A 1 {if(invoker.weaponstatus[MCRGS_TARGETFOUND]>1)setweaponstate("Hailstorm");}
		SMR1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
	goto readyend;
	flash:
		SMR8 ABCD 0 bright A_Jump(64,"flash_cont1");
		SMR2 AEBFCGDH 0 bright A_Jump(64,"flash_cont1");
	flash_cont1:
		#### # 1 bright{
			HDFlashAlpha(frandom(128,256));
			A_Light1();
		}
		TNT1 A 0 bright{
			A_Light0();
		}
		stop;
		
		user2:
	firemode:
		---- # 1{
		A_StartSound("weapons/xm556microgun/speen",CHAN_7);
			int aut=invoker.weaponstatus[MCRGS_TARGETTER];
			if(aut>=1)invoker.weaponstatus[MCRGS_TARGETTER]=0;
			else if(aut<0)invoker.weaponstatus[MCRGS_TARGETTER]=0;
			else invoker.weaponstatus[MCRGS_TARGETTER]++;
		}goto nope;

	reload:
		SMR1 A 0{
			if(
				invoker.weaponstatus[MCRGS_AMMO]>=250
				||!countinv("HD_PB_7mmBeltBox")
			){return resolvestate("nope");}
			invoker.weaponstatus[0]&=~MCRGF_JUSTUNLOAD;
			return resolvestate("unmag");
		}

	user4:
	unload:
		SMR1 A 0{
			if(invoker.weaponstatus[MCRGS_AMMO]<0){
				return resolvestate("nope");
			}invoker.weaponstatus[0]|=MCRGF_JUSTUNLOAD;return resolvestate(null);
		}
	unmag:
		SMR1 A 1 offset(0,33);
		SMR1 A 1 offset(0,35);
		SMR1 A 1 offset(0,37);
		SMR1 A 1 offset(0,39);
		SMR1 A 2 offset(0,44);
		SMR1 A 2 offset(0,52);
		SMR1 A 3 offset(2,62);
		SMR1 A 4 offset(4,74);
		SMR1 A 7 offset(6,78)A_StartSound("weapons/csawopen",CHAN_WEAPON);
		SMR1 A 0{
			if(
				!PressingUnload()&&!PressingReload()
			){
				setweaponstate("dropmag");
			}else setweaponstate("pocketmag");
		}
	dropmag:
		SMR1 A 0{
			if(invoker.weaponstatus[MCRGS_AMMO]>=0){
				HDMagAmmo.SpawnMag(self,"HD_PB_7mmBeltBox",invoker.weaponstatus[MCRGS_AMMO]);
			}
			invoker.weaponstatus[MCRGS_AMMO]=-1;
		}goto magout;
	pocketmag:
		SMR1 A 6 offset(7,80){
			if(invoker.weaponstatus[MCRGS_AMMO]>=0){
				HDMagAmmo.GiveMag(self,"HD_PB_7mmBeltBox",invoker.weaponstatus[MCRGS_AMMO]);
				A_StartSound("weapons/pocket");
				A_MuzzleClimb(
					randompick(-1,1)*frandom(-0.3,-1.2),
					randompick(-1,1)*frandom(0.3,1.8)
				);
			}
			invoker.weaponstatus[MCRGS_AMMO]=-1;
		}
		SMR1 A 7 offset(6,81) A_StartSound("weapons/pocket");
		goto magout;

	magout:
		SMR1 A 0 A_JumpIf(invoker.weaponstatus[0]&MCRGF_JUSTUNLOAD,"reloadend");
	loadmag:
		SMR1 A 4 offset(7,79) A_MuzzleClimb(
			randompick(-1,1)*frandom(-0.3,-1.2),
			randompick(-1,1)*frandom(0.3,0.8)
		);
		SMR1 A 2 offset(6,78) A_StartSound("weapons/pocket");
		SMR1 AA 5 offset(5,76) A_MuzzleClimb(
			randompick(-1,1)*frandom(-0.3,-1.2),
			randompick(-1,1)*frandom(0.3,0.8)
		);
		SMR1 A 0{
			let mmm=HDMagAmmo(findinventory("HD_PB_7mmBeltBox"));
			if(mmm)invoker.weaponstatus[MCRGS_AMMO]=mmm.TakeMag(true);
		}
	reloadend:
		SMR1 A 6 offset(5,72);
		SMR1 A 5 offset(4,74)A_StartSound("weapons/csawclose",CHAN_WEAPON);
		SMR1 A 4 offset(2,62);
		SMR1 A 3 offset(0,52);
		SMR1 A 4 offset(0,44);
		SMR1 A 1 offset(0,37);
		SMR1 A 1 offset(0,35);
		SMR1 C 1 offset(0,33);
		goto ready;

	user3:
		SMR1 A 0 A_MagManager("HD_PB_7mmBeltBox");
		goto ready;
	
		spawn:
		SMP1 A 0 nodelay A_JumpIf(invoker.weaponstatus[MCRGS_AMMO]<0,2);
		SMP1 B 0;
		#### # -1;
		stop;

	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[MCRGS_AMMO]=250;
		weaponstatus[0]&=~MCRGS_AMMO;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[MCRGS_HEAT]=0;
		}
	}
}
enum xm776microgunstatus{
	MCRGF_JUSTUNLOAD=1,
	MCRGF_STRAPPED=2,

	MCRGS_STATUS=0,
	MCRGS_AMMO=1,
	MCRGS_HEAT=2,
	MCRGS_TARGETTER=3,
	MCRGS_TARGETFOUND=4,
	MCRGS_MAGBOX=5,
};

class HD_Downwards776Casing_PB:HDSpent7mm{
	override void postbeginplay(){
		super.postbeginplay();
		A_ChangeVelocity(frandom(-1,1),frandom(-0.4,0.4),0,CVF_RELATIVE);
	}
	default{
		bouncefactor 0.05;
	}
	states{
	death:
		TNT1 A 1{
			actor a=spawn("SevenMilBrass",self.pos,ALLOW_REPLACE);
			a.roll=self.roll;a.vel=self.vel;
		}stop;
	}
}